AWSTemplateFormatVersion: 2010-09-09
Description: Middleware AWS Integration API Call
Parameters:
  MiddlewareApiKey:
    Description: >-
      API key for the Middleware account
    Type: String
    NoEcho: true
    Default: ""
  Target:
    Type: String
    Default: uid.middleware.io
    Description: Define your Middleware Site to send data to.
  RoleName:
    Description: >-
      The name of the IAM role created for Middleware's use.
    Type: String
  DisableMetricCollection:
    Type: String
    AllowedValues:
      - true
      - false
    Description: >-
      Disabling metric collection for this account will lead to a loss in visibility into your AWS services. 
      Disable this if you only want to collect tags or resource configuration information from this AWS account, 
      and do not want to use Middleware Infrastructure Monitoring.
    Default: false
Resources:
  LambdaExecutionRoleMiddlewareEC2List:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  # Retrieving secrets passed in via SecretsManager Arn
  MiddlewareEC2List:
    Type: "Custom::MiddlewareEC2List"
    Properties:
      ServiceToken: !GetAtt MiddlewareEC2ListFunction.Arn
      APIKey: !Ref MiddlewareApiKey
      ApiURL: !Ref Target
      AccountId: !Ref AWS::AccountId
      RoleName: !Ref RoleName
      HostTags: [!Sub "aws_account:${AWS::AccountId}"]
      DisableMetricCollection: !Ref DisableMetricCollection
  MiddlewareEC2ListFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "A function to call the Middleware API."
      Role: !GetAtt LambdaExecutionRoleMiddlewareEC2List.Arn
      Handler: "index.handler"
      Runtime: "python3.8"
      Timeout: 30
      Code:
        ZipFile: |
          import boto3
          import logging
          region = 'us-east-1'

          LOGGER = logging.getLogger()
          LOGGER.setLevel(logging.INFO)

          ec2 = boto3.client('ec2', region_name=region)

          def handler(event, context):
              instance_ids = []
              response = ec2.describe_instances(Filters=[{'Name': 'instance-type', 'Values': ["t2.micro", "t3.micro"]}])
              instances_full_details = response['Reservations']
              for instance_detail in instances_full_details:
                  group_instances = instance_detail['Instances']

                  for instance in group_instances:
                      instance_id = instance['InstanceId']
                      instance_ids.append(instance_id)
              LOGGER.info('INSTANCES RECEIVED:\n %s', instance_ids)
# Outputs:
#   ExternalId:
#     Description: Middleware AWS Integration ExternalId
#     Value: !GetAtt MiddlewareEC2List.ExternalId
